import inquirer from "inquirer";
import chalk from "chalk";
import chalkTable from "chalk-table";
import ChinaRailway from "./cr.js";
import fs from "fs";
import yaml from "js-yaml";

// Ëá™ÂÆö‰πâ‰∏≠ÊñáÊèêÁ§∫ËØ≠
const chinesePrompts = {
  checkbox: {
    help: "(‰ΩøÁî® ‚Üë‚Üì ÁßªÂä®ÔºåÁ©∫Ê†º ÈÄâÊã©Ôºåa ÂÖ®ÈÄâÔºåi ÂèçÈÄâÔºåÂõûËΩ¶ Á°ÆËÆ§)",
    selected: "Â∑≤ÈÄâÊã©",
    unselected: "Êú™ÈÄâÊã©",
  },
  list: {
    help: "(‰ΩøÁî® ‚Üë‚Üì ÁßªÂä®ÔºåÂõûËΩ¶ Á°ÆËÆ§)",
  },
  confirm: {
    help: "(y/n)",
  },
  input: {
    help: "ËØ∑ËæìÂÖ•ÂêéÊåâÂõûËΩ¶Á°ÆËÆ§",
  },
};

// ÂàõÂª∫Ëá™ÂÆö‰πâ prompt ÂáΩÊï∞
async function promptWithChinese(questions) {
  // ‰∏∫ÊØè‰∏™ÈóÆÈ¢òÊ∑ªÂä†‰∏≠ÊñáÊèêÁ§∫
  const processedQuestions = questions.map((q) => {
    const newQ = { ...q };

    switch (q.type) {
      case "checkbox":
        newQ.message =
          q.message + " " + chalk.gray(chinesePrompts.checkbox.help);
        break;
      case "list":
        newQ.message = q.message + " " + chalk.gray(chinesePrompts.list.help);
        break;
      case "confirm":
        newQ.message =
          q.message + " " + chalk.gray(chinesePrompts.confirm.help);
        break;
      case "input":
      case "number":
        if (!q.message.includes("ËØ∑ËæìÂÖ•")) {
          newQ.message = q.message + " " + chalk.gray("(ËØ∑ËæìÂÖ•ÂêéÊåâÂõûËΩ¶Á°ÆËÆ§)");
        }
        break;
    }

    return newQ;
  });

  return await inquirer.prompt(processedQuestions);
}

async function main() {
  console.clear();
  console.log(chalk.cyan.bold("\n=== 12306 ‰ΩôÁ•®ÁõëÊéß‰∫§‰∫íÊ®°Âºè ===\n"));

  while (true) {
    // ‰∏ªËèúÂçï
    const { action } = await promptWithChinese([
      {
        type: "list",
        name: "action",
        message: "ËØ∑ÈÄâÊã©Êìç‰Ωú:",
        choices: [
          { name: "üîç Êü•ËØ¢ËΩ¶Ê¨°Âπ∂ÈÖçÁΩÆÁõëÊéß", value: "query" },
          { name: "‚öôÔ∏è  ÁºñËæëÁé∞ÊúâÈÖçÁΩÆ", value: "edit" },
          { name: "üìä Êü•ÁúãÂΩìÂâçÈÖçÁΩÆ", value: "view" },
          { name: "üöÄ Áõ¥Êé•ÂêØÂä®ÁõëÊéß", value: "start" },
          { name: "‚ùå ÈÄÄÂá∫", value: "exit" },
        ],
      },
    ]);

    switch (action) {
      case "query":
        await queryAndConfig();
        break;
      case "edit":
        await editConfig();
        break;
      case "view":
        await viewConfig();
        break;
      case "start":
        await startMonitoring();
        return; // ÂêØÂä®ÁõëÊéßÂêéÈÄÄÂá∫‰∫§‰∫íÊ®°Âºè
      case "exit":
        console.log(chalk.yellow("Â∑≤ÈÄÄÂá∫"));
        process.exit(0);
    }

    // Êìç‰ΩúÂÆåÊàêÂêéÊòæÁ§∫ÂàÜÈöîÁ∫ø
    console.log(chalk.gray("\n" + "=".repeat(50)));
  }
}

async function queryAndConfig(isFirstTime = true) {
  // 1. ËæìÂÖ•Âá∫ÂèëÂú∞„ÄÅÁõÆÁöÑÂú∞„ÄÅÊó•Êúü
  const { from, to, date } = await promptWithChinese([
    {
      name: "from",
      message: "ËØ∑ËæìÂÖ•Âá∫ÂèëÂú∞(Â¶Ç: ‰∏äÊµ∑):",
      validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
    },
    {
      name: "to",
      message: "ËØ∑ËæìÂÖ•ÁõÆÁöÑÂú∞(Â¶Ç: Âåó‰∫¨):",
      validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
    },
    {
      name: "date",
      message: "ËØ∑ËæìÂÖ•Êó•Êúü(YYYYMMDD):",
      validate: (v) => (/^\d{8}$/.test(v) ? true : "Ê†ºÂºèÈîôËØØÔºåËØ∑ËæìÂÖ•8‰ΩçÊï∞Â≠ó"),
    },
  ]);

  // 2. Êü•ËØ¢ËΩ¶Ê¨°
  const fromCode = await ChinaRailway.getStationCode(from);
  const toCode = await ChinaRailway.getStationCode(to);
  if (!fromCode || !toCode) {
    console.log(chalk.red("Á´ôÁÇπÂêçÁß∞Êó†ÊïàÔºåËØ∑Ê£ÄÊü•ËæìÂÖ•ÔºÅ"));
    return;
  }
  let data;
  try {
    console.log(chalk.blue("Ê≠£Âú®Êü•ËØ¢ËΩ¶Ê¨°‰ø°ÊÅØ..."));
    data = await ChinaRailway.checkTickets(date, fromCode, toCode);
  } catch (e) {
    console.log(chalk.red("Êü•ËØ¢Â§±Ë¥•:"), e.message);
    return;
  }
  const trains = data.data.result.map((row) =>
    ChinaRailway.parseTrainInfo(row)
  );
  if (!trains.length) {
    console.log(chalk.yellow("Êó†ÂèØÁî®ËΩ¶Ê¨°ÔºÅ"));
    return;
  }

  // 3. ÊòæÁ§∫ËΩ¶Ê¨°ÂàóË°®
  console.log(chalk.blue(`\nÊâæÂà∞ ${trains.length} ‰∏™ËΩ¶Ê¨°Ôºö\n`));

  const tableData = await Promise.all(
    trains.map(async (train) => ({
      ËΩ¶Ê¨°: chalk.green(train.station_train_code),
      Âá∫ÂèëÁ´ô: await ChinaRailway.getStationName(train.from_station_telecode),
      Âà∞ËææÁ´ô: await ChinaRailway.getStationName(train.to_station_telecode),
      ÂèëËΩ¶Êó∂Èó¥: train.start_time,
      Âà∞ËææÊó∂Èó¥: train.arrive_time,
      ÂéÜÊó∂: train.lishi,
      ÂïÜÂä°Â∫ß: train.tickets.ÂïÜÂä°Â∫ß || "--",
      ‰∏ÄÁ≠âÂ∫ß: train.tickets.‰∏ÄÁ≠âÂ∫ß || "--",
      ‰∫åÁ≠âÂ∫ß: train.tickets.‰∫åÁ≠âÂ∫ß || "--",
      Á°¨Âçß: train.tickets.Á°¨Âçß || "--",
      Á°¨Â∫ß: train.tickets.Á°¨Â∫ß || "--",
    }))
  );

  const table = chalkTable(
    {
      leftPad: 2,
      columns: [
        { field: "ËΩ¶Ê¨°", name: "ËΩ¶Ê¨°" },
        { field: "Âá∫ÂèëÁ´ô", name: "Âá∫ÂèëÁ´ô" },
        { field: "Âà∞ËææÁ´ô", name: "Âà∞ËææÁ´ô" },
        { field: "ÂèëËΩ¶Êó∂Èó¥", name: "ÂèëËΩ¶" },
        { field: "Âà∞ËææÊó∂Èó¥", name: "Âà∞Ëææ" },
        { field: "ÂéÜÊó∂", name: "ÂéÜÊó∂" },
        { field: "ÂïÜÂä°Â∫ß", name: "ÂïÜÂä°Â∫ß" },
        { field: "‰∏ÄÁ≠âÂ∫ß", name: "‰∏ÄÁ≠âÂ∫ß" },
        { field: "‰∫åÁ≠âÂ∫ß", name: "‰∫åÁ≠âÂ∫ß" },
        { field: "Á°¨Âçß", name: "Á°¨Âçß" },
        { field: "Á°¨Â∫ß", name: "Á°¨Â∫ß" },
      ],
    },
    tableData
  );
  console.log(table);

  // 4. ÈÄâÊã©ËΩ¶Ê¨°Âπ∂ÈÖçÁΩÆËØ¶ÁªÜÂèÇÊï∞
  const { selectedTrains } = await promptWithChinese([
    {
      type: "checkbox",
      name: "selectedTrains",
      message: "ËØ∑ÈÄâÊã©Ë¶ÅÁõëÊéßÁöÑËΩ¶Ê¨°(ÂèØÂ§öÈÄâ):",
      choices: trains.map((t) => ({
        name: `${t.station_train_code} ${t.start_time}-${t.arrive_time}`,
        value: t,
      })),
      validate: (answer) => {
        if (answer.length < 1) {
          return "Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™ËΩ¶Ê¨°";
        }
        return true;
      },
    },
  ]);

  if (!selectedTrains.length) {
    console.log(chalk.yellow("Êú™ÈÄâÊã©‰ªª‰ΩïËΩ¶Ê¨°ÔºåÂ∑≤ÈÄÄÂá∫„ÄÇ"));
    return;
  }

  // 5. ‰∏∫ÊØè‰∏™ÈÄâ‰∏≠ÁöÑËΩ¶Ê¨°ÈÖçÁΩÆËØ¶ÁªÜÂèÇÊï∞
  const configuredTrains = [];
  for (const train of selectedTrains) {
    console.log(chalk.cyan(`\nÈÖçÁΩÆËΩ¶Ê¨° ${train.station_train_code}:`));

    const { seatTypes, checkRoundTrip } = await promptWithChinese([
      {
        type: "checkbox",
        name: "seatTypes",
        message: "ÈÄâÊã©Ë¶ÅÁõëÊéßÁöÑÂ∏≠Âà´(‰∏çÈÄâÊã©ÂàôÁõëÊéßÊâÄÊúâÂ∏≠Âà´):",
        choices: [
          { name: "ÂïÜÂä°Â∫ß", value: "ÂïÜÂä°Â∫ß" },
          { name: "ÁâπÁ≠âÂ∫ß", value: "ÁâπÁ≠âÂ∫ß" },
          { name: "‰∏ÄÁ≠âÂ∫ß", value: "‰∏ÄÁ≠âÂ∫ß" },
          { name: "‰∫åÁ≠âÂ∫ß", value: "‰∫åÁ≠âÂ∫ß" },
          { name: "ËΩØÂçß", value: "ËΩØÂçß" },
          { name: "Á°¨Âçß", value: "Á°¨Âçß" },
          { name: "ËΩØÂ∫ß", value: "ËΩØÂ∫ß" },
          { name: "Á°¨Â∫ß", value: "Á°¨Â∫ß" },
          { name: "Êó†Â∫ß", value: "Êó†Â∫ß" },
        ],
      },
      {
        type: "confirm",
        name: "checkRoundTrip",
        message: "ÊòØÂê¶Êü•ËØ¢ÂÖ®Á®ãÁ•®ÊÉÖÂÜµ?",
        default: false,
      },
    ]);

    const trainConfig = {
      code: train.station_train_code,
      from: await ChinaRailway.getStationName(train.from_station_telecode),
      to: await ChinaRailway.getStationName(train.to_station_telecode),
      checkRoundTrip,
    };

    if (seatTypes.length > 0) {
      trainConfig.seatCategory = seatTypes;
    }

    configuredTrains.push(trainConfig);
  }

  // 6. ÈÖçÁΩÆÊé®ÈÄÅÊñπÂºè
  const { useNotifications } = await promptWithChinese([
    {
      type: "confirm",
      name: "useNotifications",
      message: "ÊòØÂê¶ÈÖçÁΩÆÊé®ÈÄÅÈÄöÁü•?",
      default: false,
    },
  ]);

  let notifications = [];
  if (useNotifications) {
    const { notificationType } = await promptWithChinese([
      {
        type: "list",
        name: "notificationType",
        message: "ÈÄâÊã©Êé®ÈÄÅÊñπÂºè:",
        choices: [
          { name: "È£û‰π¶Êé®ÈÄÅ", value: "Lark" },
          { name: "TelegramÊé®ÈÄÅ", value: "Telegram" },
          { name: "‰ºÅ‰∏öÂæÆ‰ø°Êé®ÈÄÅ", value: "WechatWork" },
          { name: "BarkÊé®ÈÄÅ", value: "Bark" },
          { name: "SMTPÈÇÆ‰ª∂Êé®ÈÄÅ", value: "SMTP" },
        ],
      },
    ]);

    if (notificationType === "Lark") {
      const { webhook } = await promptWithChinese([
        {
          name: "webhook",
          message: "ËØ∑ËæìÂÖ•È£û‰π¶Êú∫Âô®‰∫∫Webhook URL:",
          validate: (v) =>
            v.includes("feishu.cn")
              ? true
              : "URLÊ†ºÂºèÈîôËØØÔºåËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑÈ£û‰π¶Êú∫Âô®‰∫∫URL",
        },
      ]);

      const { needSecret } = await promptWithChinese([
        {
          type: "confirm",
          name: "needSecret",
          message: "ÊòØÂê¶ÂêØÁî®Á≠æÂêçÊ†°È™åÔºüÔºàÂª∫ËÆÆÂêØÁî®‰ª•ÊèêÈ´òÂÆâÂÖ®ÊÄßÔºâ",
          default: false,
        },
      ]);

      let secret = "";
      if (needSecret) {
        const secretInput = await promptWithChinese([
          {
            name: "secret",
            message: "ËØ∑ËæìÂÖ•Á≠æÂêçÂØÜÈí•Ôºà‰ªéÈ£û‰π¶Êú∫Âô®‰∫∫ÂÆâÂÖ®ËÆæÁΩÆ‰∏≠Ëé∑ÂèñÔºâ:",
            validate: (v) => (v.trim() ? true : "ÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
          },
        ]);
        secret = secretInput.secret;
      }

      const larkConfig = { type: "Lark", webhook };
      if (secret) {
        larkConfig.secret = secret;
      }
      notifications.push(larkConfig);
    } else if (notificationType === "Telegram") {
      const { botToken, chatId } = await promptWithChinese([
        {
          name: "botToken",
          message: "ËØ∑ËæìÂÖ•Telegram Bot Token:",
          validate: (v) =>
            v.includes(":") ? true : "Ê†ºÂºèÈîôËØØÔºåTokenÂ∫îÂåÖÂê´ÂÜíÂè∑",
        },
        {
          name: "chatId",
          message: "ËØ∑ËæìÂÖ•Chat ID:",
          validate: (v) => (v.trim() ? true : "Chat ID‰∏çËÉΩ‰∏∫Á©∫"),
        },
      ]);
      notifications.push({ type: "Telegram", botToken, chatId });
    } else if (notificationType === "WechatWork") {
      const { webhook } = await promptWithChinese([
        {
          name: "webhook",
          message: "ËØ∑ËæìÂÖ•‰ºÅ‰∏öÂæÆ‰ø°Êú∫Âô®‰∫∫Webhook URL:",
          validate: (v) =>
            v.includes("qyapi.weixin.qq.com")
              ? true
              : "URLÊ†ºÂºèÈîôËØØÔºåËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑ‰ºÅ‰∏öÂæÆ‰ø°Êú∫Âô®‰∫∫URL",
        },
      ]);
      notifications.push({ type: "WechatWork", webhook });
    } else if (notificationType === "Bark") {
      const barkConfig = await promptWithChinese([
        {
          name: "deviceKey",
          message: "ËØ∑ËæìÂÖ•BarkËÆæÂ§áÂØÜÈí•(Device Key):",
          validate: (v) => (v.trim() ? true : "ËÆæÂ§áÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
        },
        {
          name: "serverUrl",
          message: "ËØ∑ËæìÂÖ•BarkÊúçÂä°Âô®Âú∞ÂùÄ(ÈªòËÆ§: https://api.day.app):",
          default: "https://api.day.app",
        },
        {
          name: "group",
          message: "Êé®ÈÄÅÂàÜÁªÑÂêçÁß∞(ÂèØÈÄâ):",
          default: "ÁÅ´ËΩ¶Á•®ÁõëÊéß",
        },
        {
          name: "sound",
          message: "Êé®ÈÄÅÂ£∞Èü≥(ÂèØÈÄâ, ÈªòËÆ§: default):",
          default: "default",
        },
      ]);

      // ËØ¢ÈóÆÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π
      const { useAdvanced } = await promptWithChinese([
        {
          type: "confirm",
          name: "useAdvanced",
          message: "ÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π(Êé®ÈÄÅÁ∫ßÂà´„ÄÅÂõæÊ†áÁ≠â)?",
          default: false,
        },
      ]);

      if (useAdvanced) {
        const advancedConfig = await promptWithChinese([
          {
            type: "list",
            name: "level",
            message: "Êé®ÈÄÅÁ∫ßÂà´:",
            choices: [
              { name: "ÈªòËÆ§(active)", value: "active" },
              { name: "ÈáçË¶ÅË≠¶Âëä(critical)", value: "critical" },
              { name: "Êó∂ÊïàÊÄßÈÄöÁü•(timeSensitive)", value: "timeSensitive" },
              { name: "‰ªÖÊ∑ªÂä†Âà∞ÂàóË°®(passive)", value: "passive" },
            ],
            default: "active",
          },
          {
            name: "icon",
            message: "Ëá™ÂÆö‰πâÂõæÊ†áURL(ÂèØÈÄâ):",
          },
          {
            name: "url",
            message: "ÁÇπÂáªË∑≥ËΩ¨URL(ÂèØÈÄâ):",
          },
          {
            type: "confirm",
            name: "autoCopy",
            message: "Ëá™Âä®Â§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ?",
            default: false,
          },
          {
            type: "confirm",
            name: "isArchive",
            message: "‰øùÂ≠òÊé®ÈÄÅÂà∞ÂéÜÂè≤ËÆ∞ÂΩï?",
            default: true,
          },
        ]);

        Object.assign(barkConfig, advancedConfig);
      }

      notifications.push({ type: "Bark", ...barkConfig });
    } else if (notificationType === "SMTP") {
      console.log(chalk.cyan("ÈÖçÁΩÆSMTPÈÇÆ‰ª∂Êé®ÈÄÅ:"));

      const smtpConfig = await promptWithChinese([
        {
          name: "host",
          message: "SMTPÊúçÂä°Âô®Âú∞ÂùÄ(Â¶Ç: smtp.gmail.com):",
          validate: (v) => (v.trim() ? true : "SMTPÊúçÂä°Âô®Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫"),
        },
        {
          type: "number",
          name: "port",
          message: "SMTPÁ´ØÂè£Âè∑(Â∏∏Áî®: 587-STARTTLS, 465-SSL, 25-Êó†Âä†ÂØÜ):",
          default: 587,
          validate: (v) =>
            v > 0 && v <= 65535 ? true : "Á´ØÂè£Âè∑ÂøÖÈ°ªÂú®1-65535‰πãÈó¥",
        },
        {
          name: "user",
          message: "ÈÇÆÁÆ±Áî®Êà∑Âêç:",
          validate: (v) => (v.trim() ? true : "ÈÇÆÁÆ±Áî®Êà∑Âêç‰∏çËÉΩ‰∏∫Á©∫"),
        },
        {
          type: "password",
          name: "pass",
          message: "ÈÇÆÁÆ±ÂØÜÁ†ÅÊàñÂ∫îÁî®ÂØÜÁ†Å:",
          validate: (v) => (v.trim() ? true : "ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫"),
        },
        {
          name: "from",
          message: "Âèë‰ª∂‰∫∫ÊòæÁ§∫ÂêçÁß∞(ÂèØÈÄâ, ÈªòËÆ§‰ΩøÁî®Áî®Êà∑Âêç):",
        },
        {
          name: "to",
          message: "Êî∂‰ª∂‰∫∫ÈÇÆÁÆ±Âú∞ÂùÄ:",
          validate: (v) => {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(v.trim()) ? true : "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ";
          },
        },
      ]);

      // ËØ¢ÈóÆÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π
      const { useAdvancedSMTP } = await promptWithChinese([
        {
          type: "confirm",
          name: "useAdvancedSMTP",
          message: "ÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π(ÂÆâÂÖ®ËøûÊé•„ÄÅÊäÑÈÄÅÁ≠â)?",
          default: false,
        },
      ]);

      if (useAdvancedSMTP) {
        const advancedSMTPConfig = await promptWithChinese([
          {
            type: "list",
            name: "secure",
            message: "ÂÆâÂÖ®ËøûÊé•Á±ªÂûã:",
            choices: [
              { name: "Ëá™Âä®Ê£ÄÊµã(Êé®Ëçê)", value: undefined },
              { name: "SSL/TLS (Á´ØÂè£465)", value: true },
              { name: "STARTTLS (Á´ØÂè£587)", value: false },
            ],
            default: undefined,
          },
          {
            name: "cc",
            message: "ÊäÑÈÄÅÈÇÆÁÆ±(Â§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöî, ÂèØÈÄâ):",
          },
          {
            name: "bcc",
            message: "ÂØÜÈÄÅÈÇÆÁÆ±(Â§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöî, ÂèØÈÄâ):",
          },
          {
            name: "replyTo",
            message: "ÂõûÂ§çÈÇÆÁÆ±(ÂèØÈÄâ):",
          },
        ]);

        Object.assign(smtpConfig, advancedSMTPConfig);
      }

      notifications.push({ type: "SMTP", ...smtpConfig });
    }
  }

  // 7. ÈÖçÁΩÆÁõëÊéßÂèÇÊï∞
  const { interval, delay } = await promptWithChinese([
    {
      type: "number",
      name: "interval",
      message: "Êü•ËØ¢Èó¥Èöî(ÂàÜÈíü):",
      default: 15,
      validate: (v) => (v > 0 ? true : "Èó¥ÈöîÊó∂Èó¥ÂøÖÈ°ªÂ§ß‰∫é0ÂàÜÈíü"),
    },
    {
      type: "number",
      name: "delay",
      message: "ËÆøÈóÆÂª∂Ëøü(Áßí):",
      default: 5,
      validate: (v) => (v >= 0 ? true : "Âª∂ËøüÊó∂Èó¥ÂøÖÈ°ªÂ§ß‰∫éÁ≠â‰∫é0Áßí"),
    },
  ]);

  // 8. ÁîüÊàêÈÖçÁΩÆ
  const config = {
    watch: [
      {
        from,
        to,
        date,
        trains: configuredTrains,
      },
    ],
    notifications,
    interval,
    delay,
  };

  // Âè™ÊúâÈ¶ñÊ¨°ÈÖçÁΩÆÊó∂ÊâçÁõ¥Êé•‰øùÂ≠òÊñá‰ª∂
  if (isFirstTime) {
    fs.writeFileSync(
      "config.yml",
      yaml.dump(config, { quotingType: '"', forceQuotes: false }),
      "utf-8"
    );
    console.log(chalk.green("\n‚úÖ ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞ config.yml"));
  }

  console.log(chalk.blue("\nüìã ÈÖçÁΩÆÊëòË¶Å:"));
  console.log(chalk.white(`üìç ÁõëÊéßË∑ØÁ∫ø: ${from} ‚Üí ${to}`));
  console.log(chalk.white(`üìÖ Âá∫Ë°åÊó•Êúü: ${date}`));
  console.log(chalk.white(`üöÑ ÁõëÊéßËΩ¶Ê¨°: ${configuredTrains.length} ‰∏™`));
  console.log(
    chalk.white(
      `üì≤ Êé®ÈÄÅÊñπÂºè: ${notifications.length ? notifications[0].type : "Êó†"}`
    )
  );
  console.log(chalk.white(`‚è∞ Êü•ËØ¢Èó¥Èöî: ${interval} ÂàÜÈíü`));

  // 9. Âè™ÊúâÂú®È¶ñÊ¨°ÈÖçÁΩÆÊó∂ÊâçËØ¢ÈóÆÊòØÂê¶Á´ãÂç≥ÂºÄÂßãÁõëÊéß
  if (isFirstTime) {
    const { startNow } = await promptWithChinese([
      {
        type: "confirm",
        name: "startNow",
        message: "ÊòØÂê¶Á´ãÂç≥ÂºÄÂßãÁõëÊéß?",
        default: true,
      },
    ]);

    if (startNow) {
      console.log(chalk.green("\nÊ≠£Âú®ÂêØÂä®ÁõëÊéßÁ®ãÂ∫è...\n"));
      const { spawn } = await import("child_process");
      spawn("node", ["src/index.js"], { stdio: "inherit", cwd: process.cwd() });
    } else {
      // Â¶ÇÊûúÊòØÈ¶ñÊ¨°ÈÖçÁΩÆ‰∏îÈÄâÊã©‰∏çÁ´ãÂç≥ÂêØÂä®ÔºåËØ¢ÈóÆÊòØÂê¶ËøîÂõû‰∏ªËèúÂçï
      const { backToMenu } = await promptWithChinese([
        {
          type: "confirm",
          name: "backToMenu",
          message: "ÊòØÂê¶ËøîÂõû‰∏ªËèúÂçï?",
          default: true,
        },
      ]);

      if (backToMenu) {
        console.log(chalk.cyan("\nËøîÂõû‰∏ªËèúÂçï..."));
        return config;
      }
    }
  }

  return config;
}

async function editConfig() {
  try {
    const configContent = fs.readFileSync("config.yml", "utf-8");
    const config = yaml.load(configContent);

    console.log(chalk.blue("\nüìã ÂΩìÂâçÈÖçÁΩÆÈ¢ÑËßà:"));
    console.log(chalk.cyan("ÁõëÊéß‰ªªÂä°:"));
    config.watch.forEach((watch, index) => {
      console.log(
        chalk.white(
          `  ${index + 1}. ${watch.from} ‚Üí ${watch.to} (${watch.date})`
        )
      );
      if (watch.trains && watch.trains.length > 0) {
        console.log(
          chalk.gray(`     ËΩ¶Ê¨°: ${watch.trains.map((t) => t.code).join(", ")}`)
        );
      }
    });

    console.log(chalk.cyan("Êé®ÈÄÅÈÖçÁΩÆ:"));
    if (config.notifications && config.notifications.length > 0) {
      config.notifications.forEach((notif, index) => {
        let details = "";
        if (notif.type === "Lark") {
          details = notif.webhook?.match(/^https?:\/\/(.+?)\/.*$/)?.[1] || "";
          if (notif.secret) {
            details += " (Â∑≤ÂêØÁî®Á≠æÂêçÊ†°È™å)";
          }
        } else if (notif.type === "Telegram") {
          details = `Chat ID: ${notif.chatId || ""}`;
        } else if (notif.type === "WechatWork") {
          details =
            notif.webhook?.match(/key=([^&]+)/)?.[1]?.substring(0, 8) + "..." ||
            "";
        } else if (notif.type === "Bark") {
          details = `ËÆæÂ§á: ${notif.deviceKey?.substring(0, 8)}...`;
          if (notif.group) details += `, ÂàÜÁªÑ: ${notif.group}`;
        } else if (notif.type === "SMTP") {
          details = `ÈÇÆÁÆ±: ${notif.to}`;
          if (notif.host) details += ` (${notif.host})`;
        }
        console.log(
          chalk.white(
            `  ${index + 1}. ${notif.type}${details ? ` (${details})` : ""}`
          )
        );
      });
    } else {
      console.log(chalk.gray("  Êú™ÈÖçÁΩÆÊé®ÈÄÅ"));
    }

    console.log(chalk.cyan("Êü•ËØ¢ÂèÇÊï∞:"));
    console.log(
      chalk.white(
        `  Èó¥Èöî: ${config.interval || 15}ÂàÜÈíü, Âª∂Ëøü: ${config.delay || 5}Áßí`
      )
    );
    console.log();

    const { editType } = await promptWithChinese([
      {
        type: "list",
        name: "editType",
        message: "ÈÄâÊã©ÁºñËæëÁ±ªÂûã:",
        choices: [
          { name: "‚ûï Ê∑ªÂä†ÁõëÊéß‰ªªÂä°", value: "add" },
          { name: "‚úèÔ∏è  ‰øÆÊîπÁõëÊéß‰ªªÂä°", value: "editWatch" },
          { name: "üóëÔ∏è  Âà†Èô§ÁõëÊéß‰ªªÂä°", value: "deleteWatch" },
          { name: "üì≤ ‰øÆÊîπÊé®ÈÄÅÈÖçÁΩÆ", value: "notification" },
          { name: "‚öôÔ∏è  ‰øÆÊîπÊü•ËØ¢ÂèÇÊï∞", value: "params" },
          { name: "üîÑ ÈáçÁΩÆÂÖ®ÈÉ®ÈÖçÁΩÆ", value: "reset" },
          { name: "‚ùå ËøîÂõû‰∏ªËèúÂçï", value: "back" },
        ],
      },
    ]);

    switch (editType) {
      case "add":
        await addMonitorTask(config);
        break;
      case "editWatch":
        await editMonitorTask(config);
        break;
      case "deleteWatch":
        await deleteMonitorTask(config);
        break;
      case "notification":
        await editNotificationConfig(config);
        break;
      case "params":
        await editQueryParams(config);
        break;
      case "reset":
        await resetConfig();
        break;
      case "back":
        console.log(chalk.yellow("ËøîÂõû‰∏ªËèúÂçï"));
        return;
    }
  } catch (err) {
    console.log(chalk.red("ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÊàñÊ†ºÂºèÈîôËØØ:", err.message));
  }
}

// Ê∑ªÂä†ÁõëÊéß‰ªªÂä°
async function addMonitorTask(config) {
  console.log(chalk.cyan("\n‚ûï Ê∑ªÂä†Êñ∞ÁöÑÁõëÊéß‰ªªÂä°"));
  const newTask = await queryAndConfig(false);
  if (newTask && newTask.watch && newTask.watch[0]) {
    // Ê∑ªÂä†ÁõëÊéß‰ªªÂä°
    config.watch.push(newTask.watch[0]);

    // ÂêàÂπ∂Êé®ÈÄÅÈÖçÁΩÆÔºàÂ¶ÇÊûúÊñ∞‰ªªÂä°ÂåÖÂê´Êé®ÈÄÅÈÖçÁΩÆÔºâ
    if (newTask.notifications && newTask.notifications.length > 0) {
      if (!config.notifications) {
        config.notifications = [];
      }

      // Ê£ÄÊü•ÊòØÂê¶ÊúâÈáçÂ§çÁöÑÊé®ÈÄÅÈÖçÁΩÆÔºåÈÅøÂÖçÈáçÂ§çÊ∑ªÂä†
      for (const newNotif of newTask.notifications) {
        const isDuplicate = config.notifications.some((existingNotif) => {
          if (existingNotif.type !== newNotif.type) return false;

          // Ê†πÊçÆ‰∏çÂêåÁ±ªÂûãÊ£ÄÊü•ÊòØÂê¶ÈáçÂ§ç
          switch (newNotif.type) {
            case "Lark":
            case "WechatWork":
              return existingNotif.webhook === newNotif.webhook;
            case "Telegram":
              return (
                existingNotif.botToken === newNotif.botToken &&
                existingNotif.chatId === newNotif.chatId
              );
            case "Bark":
              return existingNotif.deviceKey === newNotif.deviceKey;
            case "SMTP":
              return (
                existingNotif.host === newNotif.host &&
                existingNotif.user === newNotif.user &&
                existingNotif.to === newNotif.to
              );
            default:
              return false;
          }
        });

        if (!isDuplicate) {
          config.notifications.push(newNotif);
        } else {
          console.log(
            chalk.yellow(`‚ö†Ô∏è  Êé®ÈÄÅÈÖçÁΩÆ ${newNotif.type} Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÊ∑ªÂä†`)
          );
        }
      }
    }

    // Êõ¥Êñ∞Êü•ËØ¢ÂèÇÊï∞ÔºàÂ¶ÇÊûúÊñ∞‰ªªÂä°ËÆæÁΩÆ‰∫ÜÊñ∞ÁöÑÂèÇÊï∞Ôºâ
    if (newTask.interval !== undefined) {
      config.interval = newTask.interval;
    }
    if (newTask.delay !== undefined) {
      config.delay = newTask.delay;
    }

    fs.writeFileSync("config.yml", yaml.dump(config), "utf-8");
    console.log(chalk.green("‚úÖ ÁõëÊéß‰ªªÂä°Â∑≤Ê∑ªÂä†!"));

    // ÊòæÁ§∫Ê∑ªÂä†ÁöÑÂÜÖÂÆπÊëòË¶Å
    console.log(chalk.blue("\nüìã Ê∑ªÂä†ÁöÑÂÜÖÂÆπ:"));
    console.log(
      chalk.white(
        `üìç ÁõëÊéßË∑ØÁ∫ø: ${newTask.watch[0].from} ‚Üí ${newTask.watch[0].to}`
      )
    );
    console.log(chalk.white(`üìÖ Âá∫Ë°åÊó•Êúü: ${newTask.watch[0].date}`));
    if (newTask.notifications && newTask.notifications.length > 0) {
      console.log(
        chalk.white(
          `üì≤ Êé®ÈÄÅÈÖçÁΩÆ: ${newTask.notifications.map((n) => n.type).join(", ")}`
        )
      );
    }
  }

  // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
  const { continueEdit } = await promptWithChinese([
    {
      type: "confirm",
      name: "continueEdit",
      message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
      default: true,
    },
  ]);

  if (continueEdit) {
    await editConfig();
  }
}

// ‰øÆÊîπÁõëÊéß‰ªªÂä°
async function editMonitorTask(config) {
  if (!config.watch || config.watch.length === 0) {
    console.log(chalk.yellow("ÊöÇÊó†ÁõëÊéß‰ªªÂä°"));
    return;
  }

  const { taskIndex } = await promptWithChinese([
    {
      type: "list",
      name: "taskIndex",
      message: "ÈÄâÊã©Ë¶Å‰øÆÊîπÁöÑÁõëÊéß‰ªªÂä°:",
      choices: config.watch.map((watch, index) => ({
        name: `${index + 1}. ${watch.from} ‚Üí ${watch.to} (${watch.date})`,
        value: index,
      })),
    },
  ]);

  const task = config.watch[taskIndex];
  const { editField } = await promptWithChinese([
    {
      type: "list",
      name: "editField",
      message: "ÈÄâÊã©Ë¶Å‰øÆÊîπÁöÑÂÜÖÂÆπ:",
      choices: [
        { name: "üìÖ ‰øÆÊîπÊó•Êúü", value: "date" },
        { name: "üöÑ ‰øÆÊîπËΩ¶Ê¨°ÈÖçÁΩÆ", value: "trains" },
        { name: "üé´ ‰øÆÊîπÂ∏≠Âà´ÈÖçÁΩÆ", value: "seats" },
        { name: "üîÑ ÈáçÊñ∞ÈÖçÁΩÆÊï¥‰∏™‰ªªÂä°", value: "recreate" },
      ],
    },
  ]);

  switch (editField) {
    case "date":
      const { newDate } = await promptWithChinese([
        {
          name: "newDate",
          message: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑÊó•Êúü(YYYYMMDD):",
          default: task.date,
          validate: (v) =>
            /^\d{8}$/.test(v) ? true : "Ê†ºÂºèÈîôËØØÔºåËØ∑ËæìÂÖ•8‰ΩçÊï∞Â≠ó",
        },
      ]);
      task.date = newDate;
      break;

    case "trains":
      // ÈáçÊñ∞Êü•ËØ¢ÂíåÈÄâÊã©ËΩ¶Ê¨°
      try {
        const fromCode = await ChinaRailway.getStationCode(task.from);
        const toCode = await ChinaRailway.getStationCode(task.to);
        const data = await ChinaRailway.checkTickets(
          task.date,
          fromCode,
          toCode
        );
        const trains = data.data.result.map((row) =>
          ChinaRailway.parseTrainInfo(row)
        );

        const { selectedTrains } = await promptWithChinese([
          {
            type: "checkbox",
            name: "selectedTrains",
            message: "ÈáçÊñ∞ÈÄâÊã©Ë¶ÅÁõëÊéßÁöÑËΩ¶Ê¨°:",
            choices: trains.map((t) => ({
              name: `${t.station_train_code} ${t.start_time}-${t.arrive_time}`,
              value: t,
              checked: task.trains?.some(
                (existing) => existing.code === t.station_train_code
              ),
            })),
            validate: (answer) =>
              answer.length > 0 ? true : "Ëá≥Â∞ëÈÄâÊã©‰∏Ä‰∏™ËΩ¶Ê¨°",
          },
        ]);

        task.trains = await Promise.all(
          selectedTrains.map(async (train) => ({
            code: train.station_train_code,
            from: await ChinaRailway.getStationName(
              train.from_station_telecode
            ),
            to: await ChinaRailway.getStationName(train.to_station_telecode),
            checkRoundTrip: false,
          }))
        );
      } catch (e) {
        console.log(chalk.red("Êü•ËØ¢ËΩ¶Ê¨°Â§±Ë¥•:", e.message));
        return;
      }
      break;

    case "seats":
      if (!task.trains || task.trains.length === 0) {
        console.log(chalk.yellow("ËØ∑ÂÖàÈÖçÁΩÆËΩ¶Ê¨°"));
        return;
      }

      for (const train of task.trains) {
        const { seatTypes } = await promptWithChinese([
          {
            type: "checkbox",
            name: "seatTypes",
            message: `ÈÖçÁΩÆËΩ¶Ê¨° ${train.code} ÁöÑÂ∏≠Âà´:`,
            choices: [
              {
                name: "ÂïÜÂä°Â∫ß",
                value: "ÂïÜÂä°Â∫ß",
                checked: train.seatCategory?.includes("ÂïÜÂä°Â∫ß"),
              },
              {
                name: "ÁâπÁ≠âÂ∫ß",
                value: "ÁâπÁ≠âÂ∫ß",
                checked: train.seatCategory?.includes("ÁâπÁ≠âÂ∫ß"),
              },
              {
                name: "‰∏ÄÁ≠âÂ∫ß",
                value: "‰∏ÄÁ≠âÂ∫ß",
                checked: train.seatCategory?.includes("‰∏ÄÁ≠âÂ∫ß"),
              },
              {
                name: "‰∫åÁ≠âÂ∫ß",
                value: "‰∫åÁ≠âÂ∫ß",
                checked: train.seatCategory?.includes("‰∫åÁ≠âÂ∫ß"),
              },
              {
                name: "ËΩØÂçß",
                value: "ËΩØÂçß",
                checked: train.seatCategory?.includes("ËΩØÂçß"),
              },
              {
                name: "Á°¨Âçß",
                value: "Á°¨Âçß",
                checked: train.seatCategory?.includes("Á°¨Âçß"),
              },
              {
                name: "ËΩØÂ∫ß",
                value: "ËΩØÂ∫ß",
                checked: train.seatCategory?.includes("ËΩØÂ∫ß"),
              },
              {
                name: "Á°¨Â∫ß",
                value: "Á°¨Â∫ß",
                checked: train.seatCategory?.includes("Á°¨Â∫ß"),
              },
              {
                name: "Êó†Â∫ß",
                value: "Êó†Â∫ß",
                checked: train.seatCategory?.includes("Êó†Â∫ß"),
              },
            ],
          },
        ]);

        if (seatTypes.length > 0) {
          train.seatCategory = seatTypes;
        } else {
          delete train.seatCategory;
        }
      }
      break;

    case "recreate":
      console.log(chalk.cyan("ÈáçÊñ∞ÈÖçÁΩÆ‰ªªÂä°ÔºåÂΩìÂâçÈÖçÁΩÆÂ∞ÜË¢´ÊõøÊç¢"));
      const newTask = await queryAndConfig(false);
      if (newTask && newTask.watch && newTask.watch[0]) {
        config.watch[taskIndex] = newTask.watch[0];
      }
      return;
  }

  fs.writeFileSync("config.yml", yaml.dump(config), "utf-8");
  console.log(chalk.green("‚úÖ ÁõëÊéß‰ªªÂä°Â∑≤Êõ¥Êñ∞!"));

  // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
  const { continueEdit } = await promptWithChinese([
    {
      type: "confirm",
      name: "continueEdit",
      message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
      default: true,
    },
  ]);

  if (continueEdit) {
    await editConfig();
  }
}

// Âà†Èô§ÁõëÊéß‰ªªÂä°
async function deleteMonitorTask(config) {
  if (!config.watch || config.watch.length === 0) {
    console.log(chalk.yellow("ÊöÇÊó†ÁõëÊéß‰ªªÂä°"));
    return;
  }

  const { taskIndex } = await promptWithChinese([
    {
      type: "list",
      name: "taskIndex",
      message: "ÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÁõëÊéß‰ªªÂä°:",
      choices: config.watch.map((watch, index) => ({
        name: `${index + 1}. ${watch.from} ‚Üí ${watch.to} (${watch.date})`,
        value: index,
      })),
    },
  ]);

  const task = config.watch[taskIndex];
  const { confirmDelete } = await promptWithChinese([
    {
      type: "confirm",
      name: "confirmDelete",
      message: `Á°ÆËÆ§Âà†Èô§‰ªªÂä° "${task.from} ‚Üí ${task.to} (${task.date})" ?`,
      default: false,
    },
  ]);

  if (confirmDelete) {
    config.watch.splice(taskIndex, 1);
    fs.writeFileSync("config.yml", yaml.dump(config), "utf-8");
    console.log(chalk.green("‚úÖ ÁõëÊéß‰ªªÂä°Â∑≤Âà†Èô§!"));
  } else {
    console.log(chalk.yellow("Â∑≤ÂèñÊ∂àÂà†Èô§"));
  }

  // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
  const { continueEdit } = await promptWithChinese([
    {
      type: "confirm",
      name: "continueEdit",
      message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
      default: true,
    },
  ]);

  if (continueEdit) {
    await editConfig();
  }
}

// ‰øÆÊîπÊé®ÈÄÅÈÖçÁΩÆ
async function editNotificationConfig(config) {
  const { notifAction } = await promptWithChinese([
    {
      type: "list",
      name: "notifAction",
      message: "ÈÄâÊã©Êé®ÈÄÅÈÖçÁΩÆÊìç‰Ωú:",
      choices: [
        { name: "‚ûï Ê∑ªÂä†Êé®ÈÄÅÈÖçÁΩÆ", value: "add" },
        { name: "‚úèÔ∏è  ‰øÆÊîπÊé®ÈÄÅÈÖçÁΩÆ", value: "edit" },
        { name: "üóëÔ∏è  Âà†Èô§Êé®ÈÄÅÈÖçÁΩÆ", value: "delete" },
        { name: "üßπ Ê∏ÖÁ©∫ÊâÄÊúâÊé®ÈÄÅÈÖçÁΩÆ", value: "clear" },
      ],
    },
  ]);

  switch (notifAction) {
    case "add":
      const { notificationType } = await promptWithChinese([
        {
          type: "list",
          name: "notificationType",
          message: "ÈÄâÊã©Êé®ÈÄÅÊñπÂºè:",
          choices: [
            { name: "È£û‰π¶Êé®ÈÄÅ", value: "Lark" },
            { name: "TelegramÊé®ÈÄÅ", value: "Telegram" },
            { name: "‰ºÅ‰∏öÂæÆ‰ø°Êé®ÈÄÅ", value: "WechatWork" },
            { name: "BarkÊé®ÈÄÅ", value: "Bark" },
            { name: "SMTPÈÇÆ‰ª∂Êé®ÈÄÅ", value: "SMTP" },
          ],
        },
      ]);

      let newNotification = { type: notificationType };

      if (notificationType === "Lark") {
        const { webhook } = await promptWithChinese([
          {
            name: "webhook",
            message: "ËØ∑ËæìÂÖ•È£û‰π¶Êú∫Âô®‰∫∫Webhook URL:",
            validate: (v) => (v.includes("feishu.cn") ? true : "URLÊ†ºÂºèÈîôËØØ"),
          },
        ]);
        newNotification.webhook = webhook;

        const { needSecret } = await promptWithChinese([
          {
            type: "confirm",
            name: "needSecret",
            message: "ÊòØÂê¶ÂêØÁî®Á≠æÂêçÊ†°È™åÔºüÔºàÂª∫ËÆÆÂêØÁî®‰ª•ÊèêÈ´òÂÆâÂÖ®ÊÄßÔºâ",
            default: false,
          },
        ]);

        if (needSecret) {
          const { secret } = await promptWithChinese([
            {
              name: "secret",
              message: "ËØ∑ËæìÂÖ•Á≠æÂêçÂØÜÈí•Ôºà‰ªéÈ£û‰π¶Êú∫Âô®‰∫∫ÂÆâÂÖ®ËÆæÁΩÆ‰∏≠Ëé∑ÂèñÔºâ:",
              validate: (v) => (v.trim() ? true : "ÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
            },
          ]);
          newNotification.secret = secret;
        }
      } else if (notificationType === "Telegram") {
        const { botToken, chatId } = await promptWithChinese([
          {
            name: "botToken",
            message: "ËØ∑ËæìÂÖ•Telegram Bot Token:",
            validate: (v) => (v.includes(":") ? true : "Ê†ºÂºèÈîôËØØ"),
          },
          {
            name: "chatId",
            message: "ËØ∑ËæìÂÖ•Chat ID:",
            validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
          },
        ]);
        newNotification.botToken = botToken;
        newNotification.chatId = chatId;
      } else if (notificationType === "WechatWork") {
        const { webhook } = await promptWithChinese([
          {
            name: "webhook",
            message: "ËØ∑ËæìÂÖ•‰ºÅ‰∏öÂæÆ‰ø°Êú∫Âô®‰∫∫Webhook URL:",
            validate: (v) =>
              v.includes("qyapi.weixin.qq.com") ? true : "URLÊ†ºÂºèÈîôËØØ",
          },
        ]);
        newNotification.webhook = webhook;
      } else if (notificationType === "Bark") {
        const barkConfig = await promptWithChinese([
          {
            name: "deviceKey",
            message: "ËØ∑ËæìÂÖ•BarkËÆæÂ§áÂØÜÈí•(Device Key):",
            validate: (v) => (v.trim() ? true : "ËÆæÂ§áÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            name: "serverUrl",
            message: "ËØ∑ËæìÂÖ•BarkÊúçÂä°Âô®Âú∞ÂùÄ(ÈªòËÆ§: https://api.day.app):",
            default: "https://api.day.app",
          },
          {
            name: "group",
            message: "Êé®ÈÄÅÂàÜÁªÑÂêçÁß∞(ÂèØÈÄâ):",
            default: "ÁÅ´ËΩ¶Á•®ÁõëÊéß",
          },
          {
            name: "sound",
            message: "Êé®ÈÄÅÂ£∞Èü≥(ÂèØÈÄâ, ÈªòËÆ§: default):",
            default: "default",
          },
        ]);

        // ËØ¢ÈóÆÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π
        const { useAdvanced } = await promptWithChinese([
          {
            type: "confirm",
            name: "useAdvanced",
            message: "ÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π(Êé®ÈÄÅÁ∫ßÂà´„ÄÅÂõæÊ†áÁ≠â)?",
            default: false,
          },
        ]);

        if (useAdvanced) {
          const advancedConfig = await promptWithChinese([
            {
              type: "list",
              name: "level",
              message: "Êé®ÈÄÅÁ∫ßÂà´:",
              choices: [
                { name: "ÈªòËÆ§(active)", value: "active" },
                { name: "ÈáçË¶ÅË≠¶Âëä(critical)", value: "critical" },
                { name: "Êó∂ÊïàÊÄßÈÄöÁü•(timeSensitive)", value: "timeSensitive" },
                { name: "‰ªÖÊ∑ªÂä†Âà∞ÂàóË°®(passive)", value: "passive" },
              ],
              default: "active",
            },
            {
              name: "icon",
              message: "Ëá™ÂÆö‰πâÂõæÊ†áURL(ÂèØÈÄâ):",
            },
            {
              name: "url",
              message: "ÁÇπÂáªË∑≥ËΩ¨URL(ÂèØÈÄâ):",
            },
            {
              type: "confirm",
              name: "autoCopy",
              message: "Ëá™Âä®Â§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ?",
              default: false,
            },
            {
              type: "confirm",
              name: "isArchive",
              message: "‰øùÂ≠òÊé®ÈÄÅÂà∞ÂéÜÂè≤ËÆ∞ÂΩï?",
              default: true,
            },
          ]);

          Object.assign(barkConfig, advancedConfig);
        }

        Object.assign(newNotification, barkConfig);
      } else if (notificationType === "SMTP") {
        console.log(chalk.cyan("ÈÖçÁΩÆSMTPÈÇÆ‰ª∂Êé®ÈÄÅ:"));

        const smtpConfig = await promptWithChinese([
          {
            name: "host",
            message: "SMTPÊúçÂä°Âô®Âú∞ÂùÄ(Â¶Ç: smtp.gmail.com):",
            validate: (v) => (v.trim() ? true : "SMTPÊúçÂä°Âô®Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            type: "number",
            name: "port",
            message: "SMTPÁ´ØÂè£Âè∑(Â∏∏Áî®: 587-STARTTLS, 465-SSL, 25-Êó†Âä†ÂØÜ):",
            default: 587,
            validate: (v) =>
              v > 0 && v <= 65535 ? true : "Á´ØÂè£Âè∑ÂøÖÈ°ªÂú®1-65535‰πãÈó¥",
          },
          {
            name: "user",
            message: "ÈÇÆÁÆ±Áî®Êà∑Âêç:",
            validate: (v) => (v.trim() ? true : "ÈÇÆÁÆ±Áî®Êà∑Âêç‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            type: "password",
            name: "pass",
            message: "ÈÇÆÁÆ±ÂØÜÁ†ÅÊàñÂ∫îÁî®ÂØÜÁ†Å:",
            validate: (v) => (v.trim() ? true : "ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            name: "from",
            message: "Âèë‰ª∂‰∫∫ÊòæÁ§∫ÂêçÁß∞(ÂèØÈÄâ, ÈªòËÆ§‰ΩøÁî®Áî®Êà∑Âêç):",
          },
          {
            name: "to",
            message: "Êî∂‰ª∂‰∫∫ÈÇÆÁÆ±Âú∞ÂùÄ:",
            validate: (v) => {
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              return emailRegex.test(v.trim()) ? true : "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ";
            },
          },
        ]);

        // ËØ¢ÈóÆÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π
        const { useAdvancedSMTP } = await promptWithChinese([
          {
            type: "confirm",
            name: "useAdvancedSMTP",
            message: "ÊòØÂê¶ÈÖçÁΩÆÈ´òÁ∫ßÈÄâÈ°π(ÂÆâÂÖ®ËøûÊé•„ÄÅÊäÑÈÄÅÁ≠â)?",
            default: false,
          },
        ]);

        if (useAdvancedSMTP) {
          const advancedSMTPConfig = await promptWithChinese([
            {
              type: "list",
              name: "secure",
              message: "ÂÆâÂÖ®ËøûÊé•Á±ªÂûã:",
              choices: [
                { name: "Ëá™Âä®Ê£ÄÊµã(Êé®Ëçê)", value: undefined },
                { name: "SSL/TLS (Á´ØÂè£465)", value: true },
                { name: "STARTTLS (Á´ØÂè£587)", value: false },
              ],
              default: undefined,
            },
            {
              name: "cc",
              message: "ÊäÑÈÄÅÈÇÆÁÆ±(Â§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöî, ÂèØÈÄâ):",
            },
            {
              name: "bcc",
              message: "ÂØÜÈÄÅÈÇÆÁÆ±(Â§ö‰∏™Áî®ÈÄóÂè∑ÂàÜÈöî, ÂèØÈÄâ):",
            },
            {
              name: "replyTo",
              message: "ÂõûÂ§çÈÇÆÁÆ±(ÂèØÈÄâ):",
            },
          ]);

          Object.assign(smtpConfig, advancedSMTPConfig);
        }

        Object.assign(newNotification, smtpConfig);
      }

      if (!config.notifications) config.notifications = [];
      config.notifications.push(newNotification);
      break;

    case "edit":
      if (!config.notifications || config.notifications.length === 0) {
        console.log(chalk.yellow("ÊöÇÊó†Êé®ÈÄÅÈÖçÁΩÆ"));
        return;
      }

      const { notifIndex } = await promptWithChinese([
        {
          type: "list",
          name: "notifIndex",
          message: "ÈÄâÊã©Ë¶Å‰øÆÊîπÁöÑÊé®ÈÄÅÈÖçÁΩÆ:",
          choices: config.notifications.map((notif, index) => ({
            name: `${index + 1}. ${notif.type}`,
            value: index,
          })),
        },
      ]);

      const notif = config.notifications[notifIndex];
      if (notif.type === "Lark") {
        const { webhook } = await promptWithChinese([
          {
            name: "webhook",
            message: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑWebhook URL:",
            default: notif.webhook,
            validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
          },
        ]);
        notif.webhook = webhook;

        // ËØ¢ÈóÆÁ≠æÂêçÊ†°È™åÈÖçÁΩÆ
        const currentHasSecret = notif.secret ? true : false;
        const { secretAction } = await promptWithChinese([
          {
            type: "list",
            name: "secretAction",
            message: "Á≠æÂêçÊ†°È™åÈÖçÁΩÆ:",
            choices: [
              {
                name: currentHasSecret ? "‰øùÊåÅÂΩìÂâçÁ≠æÂêçÂØÜÈí•" : "‰∏çÂêØÁî®Á≠æÂêçÊ†°È™å",
                value: "keep",
              },
              {
                name: currentHasSecret ? "‰øÆÊîπÁ≠æÂêçÂØÜÈí•" : "ÂêØÁî®Á≠æÂêçÊ†°È™å",
                value: "edit",
              },
              ...(currentHasSecret
                ? [{ name: "Âà†Èô§Á≠æÂêçÂØÜÈí•", value: "remove" }]
                : []),
            ],
          },
        ]);

        if (secretAction === "edit") {
          const { secret } = await promptWithChinese([
            {
              name: "secret",
              message: "ËØ∑ËæìÂÖ•Á≠æÂêçÂØÜÈí•:",
              default: notif.secret || "",
              validate: (v) => (v.trim() ? true : "ÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
            },
          ]);
          notif.secret = secret;
        } else if (secretAction === "remove") {
          delete notif.secret;
        }
      } else if (notif.type === "WechatWork") {
        const { webhook } = await promptWithChinese([
          {
            name: "webhook",
            message: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑWebhook URL:",
            default: notif.webhook,
            validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
          },
        ]);
        notif.webhook = webhook;
      } else if (notif.type === "Telegram") {
        const { botToken, chatId } = await promptWithChinese([
          {
            name: "botToken",
            message: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑBot Token:",
            default: notif.botToken,
            validate: (v) => (v.includes(":") ? true : "Ê†ºÂºèÈîôËØØ"),
          },
          {
            name: "chatId",
            message: "ËØ∑ËæìÂÖ•Êñ∞ÁöÑChat ID:",
            default: notif.chatId,
            validate: (v) => (v.trim() ? true : "‰∏çËÉΩ‰∏∫Á©∫"),
          },
        ]);
        notif.botToken = botToken;
        notif.chatId = chatId;
      } else if (notif.type === "Bark") {
        console.log(chalk.cyan("ÂΩìÂâçBarkÈÖçÁΩÆ:"));
        console.log(`  ËÆæÂ§áÂØÜÈí•: ${notif.deviceKey}`);
        console.log(`  ÊúçÂä°Âô®: ${notif.serverUrl || "https://api.day.app"}`);
        console.log(`  ÂàÜÁªÑ: ${notif.group || "Êú™ËÆæÁΩÆ"}`);
        console.log(`  Â£∞Èü≥: ${notif.sound || "default"}`);

        const barkEditConfig = await promptWithChinese([
          {
            name: "deviceKey",
            message: "ËÆæÂ§áÂØÜÈí•(Device Key):",
            default: notif.deviceKey,
            validate: (v) => (v.trim() ? true : "ËÆæÂ§áÂØÜÈí•‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            name: "serverUrl",
            message: "ÊúçÂä°Âô®Âú∞ÂùÄ:",
            default: notif.serverUrl || "https://api.day.app",
          },
          {
            name: "group",
            message: "Êé®ÈÄÅÂàÜÁªÑ:",
            default: notif.group || "ÁÅ´ËΩ¶Á•®ÁõëÊéß",
          },
          {
            name: "sound",
            message: "Êé®ÈÄÅÂ£∞Èü≥:",
            default: notif.sound || "default",
          },
        ]);

        // ËØ¢ÈóÆÊòØÂê¶‰øÆÊîπÈ´òÁ∫ßÈÄâÈ°π
        const { editAdvanced } = await promptWithChinese([
          {
            type: "confirm",
            name: "editAdvanced",
            message: "ÊòØÂê¶‰øÆÊîπÈ´òÁ∫ßÈÄâÈ°π?",
            default: false,
          },
        ]);

        if (editAdvanced) {
          const advancedEditConfig = await promptWithChinese([
            {
              type: "list",
              name: "level",
              message: "Êé®ÈÄÅÁ∫ßÂà´:",
              choices: [
                { name: "ÈªòËÆ§(active)", value: "active" },
                { name: "ÈáçË¶ÅË≠¶Âëä(critical)", value: "critical" },
                { name: "Êó∂ÊïàÊÄßÈÄöÁü•(timeSensitive)", value: "timeSensitive" },
                { name: "‰ªÖÊ∑ªÂä†Âà∞ÂàóË°®(passive)", value: "passive" },
              ],
              default: notif.level || "active",
            },
            {
              name: "icon",
              message: "Ëá™ÂÆö‰πâÂõæÊ†áURL:",
              default: notif.icon || "",
            },
            {
              name: "url",
              message: "ÁÇπÂáªË∑≥ËΩ¨URL:",
              default: notif.url || "",
            },
            {
              type: "confirm",
              name: "autoCopy",
              message: "Ëá™Âä®Â§çÂà∂Êé®ÈÄÅÂÜÖÂÆπ?",
              default: notif.autoCopy || false,
            },
            {
              type: "confirm",
              name: "isArchive",
              message: "‰øùÂ≠òÊé®ÈÄÅÂà∞ÂéÜÂè≤ËÆ∞ÂΩï?",
              default: notif.isArchive !== undefined ? notif.isArchive : true,
            },
          ]);

          Object.assign(barkEditConfig, advancedEditConfig);
        }

        Object.assign(notif, barkEditConfig);
      } else if (notif.type === "SMTP") {
        console.log(chalk.cyan("ÂΩìÂâçSMTPÈÖçÁΩÆ:"));
        console.log(`  ÊúçÂä°Âô®: ${notif.host}:${notif.port}`);
        console.log(`  Áî®Êà∑Âêç: ${notif.user}`);
        console.log(`  Êî∂‰ª∂‰∫∫: ${notif.to}`);
        if (notif.from) console.log(`  Âèë‰ª∂‰∫∫: ${notif.from}`);
        if (notif.cc) console.log(`  ÊäÑÈÄÅ: ${notif.cc}`);

        const smtpEditConfig = await promptWithChinese([
          {
            name: "host",
            message: "SMTPÊúçÂä°Âô®Âú∞ÂùÄ:",
            default: notif.host,
            validate: (v) => (v.trim() ? true : "SMTPÊúçÂä°Âô®Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            type: "number",
            name: "port",
            message: "SMTPÁ´ØÂè£Âè∑:",
            default: notif.port,
            validate: (v) =>
              v > 0 && v <= 65535 ? true : "Á´ØÂè£Âè∑ÂøÖÈ°ªÂú®1-65535‰πãÈó¥",
          },
          {
            name: "user",
            message: "ÈÇÆÁÆ±Áî®Êà∑Âêç:",
            default: notif.user,
            validate: (v) => (v.trim() ? true : "ÈÇÆÁÆ±Áî®Êà∑Âêç‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            type: "password",
            name: "pass",
            message: "ÈÇÆÁÆ±ÂØÜÁ†ÅÊàñÂ∫îÁî®ÂØÜÁ†Å:",
            default: notif.pass,
            validate: (v) => (v.trim() ? true : "ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫"),
          },
          {
            name: "from",
            message: "Âèë‰ª∂‰∫∫ÊòæÁ§∫ÂêçÁß∞:",
            default: notif.from || "",
          },
          {
            name: "to",
            message: "Êî∂‰ª∂‰∫∫ÈÇÆÁÆ±Âú∞ÂùÄ:",
            default: notif.to,
            validate: (v) => {
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              return emailRegex.test(v.trim()) ? true : "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ";
            },
          },
        ]);

        // ËØ¢ÈóÆÊòØÂê¶‰øÆÊîπÈ´òÁ∫ßÈÄâÈ°π
        const { editAdvancedSMTP } = await promptWithChinese([
          {
            type: "confirm",
            name: "editAdvancedSMTP",
            message: "ÊòØÂê¶‰øÆÊîπÈ´òÁ∫ßÈÄâÈ°π?",
            default: false,
          },
        ]);

        if (editAdvancedSMTP) {
          const advancedSMTPEditConfig = await promptWithChinese([
            {
              type: "list",
              name: "secure",
              message: "ÂÆâÂÖ®ËøûÊé•Á±ªÂûã:",
              choices: [
                { name: "Ëá™Âä®Ê£ÄÊµã(Êé®Ëçê)", value: undefined },
                { name: "SSL/TLS (Á´ØÂè£465)", value: true },
                { name: "STARTTLS (Á´ØÂè£587)", value: false },
              ],
              default: notif.secure,
            },
            {
              name: "cc",
              message: "ÊäÑÈÄÅÈÇÆÁÆ±:",
              default: notif.cc || "",
            },
            {
              name: "bcc",
              message: "ÂØÜÈÄÅÈÇÆÁÆ±:",
              default: notif.bcc || "",
            },
            {
              name: "replyTo",
              message: "ÂõûÂ§çÈÇÆÁÆ±:",
              default: notif.replyTo || "",
            },
          ]);

          Object.assign(smtpEditConfig, advancedSMTPEditConfig);
        }

        Object.assign(notif, smtpEditConfig);
      }
      break;

    case "delete":
      if (!config.notifications || config.notifications.length === 0) {
        console.log(chalk.yellow("ÊöÇÊó†Êé®ÈÄÅÈÖçÁΩÆ"));
        return;
      }

      const { delNotifIndex } = await promptWithChinese([
        {
          type: "list",
          name: "delNotifIndex",
          message: "ÈÄâÊã©Ë¶ÅÂà†Èô§ÁöÑÊé®ÈÄÅÈÖçÁΩÆ:",
          choices: config.notifications.map((notif, index) => ({
            name: `${index + 1}. ${notif.type}`,
            value: index,
          })),
        },
      ]);

      config.notifications.splice(delNotifIndex, 1);
      break;

    case "clear":
      const { confirmClear } = await promptWithChinese([
        {
          type: "confirm",
          name: "confirmClear",
          message: "Á°ÆËÆ§Ê∏ÖÁ©∫ÊâÄÊúâÊé®ÈÄÅÈÖçÁΩÆ?",
          default: false,
        },
      ]);

      if (confirmClear) {
        config.notifications = [];
      }
      break;
  }

  fs.writeFileSync("config.yml", yaml.dump(config), "utf-8");
  console.log(chalk.green("‚úÖ Êé®ÈÄÅÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞!"));

  // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
  const { continueEdit } = await promptWithChinese([
    {
      type: "confirm",
      name: "continueEdit",
      message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
      default: true,
    },
  ]);

  if (continueEdit) {
    await editConfig();
  }
}

// ‰øÆÊîπÊü•ËØ¢ÂèÇÊï∞
async function editQueryParams(config) {
  const { interval, delay } = await promptWithChinese([
    {
      type: "number",
      name: "interval",
      message: "Êü•ËØ¢Èó¥Èöî(ÂàÜÈíü):",
      default: config.interval || 15,
      validate: (v) => (v > 0 ? true : "ÂøÖÈ°ªÂ§ß‰∫é0"),
    },
    {
      type: "number",
      name: "delay",
      message: "ËÆøÈóÆÂª∂Ëøü(Áßí):",
      default: config.delay || 5,
      validate: (v) => (v >= 0 ? true : "ÂøÖÈ°ªÂ§ß‰∫éÁ≠â‰∫é0"),
    },
  ]);

  config.interval = interval;
  config.delay = delay;

  fs.writeFileSync("config.yml", yaml.dump(config), "utf-8");
  console.log(chalk.green("‚úÖ Êü•ËØ¢ÂèÇÊï∞Â∑≤Êõ¥Êñ∞!"));

  // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
  const { continueEdit } = await promptWithChinese([
    {
      type: "confirm",
      name: "continueEdit",
      message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
      default: true,
    },
  ]);

  if (continueEdit) {
    await editConfig();
  }
}

// ÈáçÁΩÆÈÖçÁΩÆ
async function resetConfig() {
  const { confirmReset } = await promptWithChinese([
    {
      type: "confirm",
      name: "confirmReset",
      message: "‚ö†Ô∏è  Á°ÆËÆ§ÈáçÁΩÆÂÖ®ÈÉ®ÈÖçÁΩÆ? ÂΩìÂâçÈÖçÁΩÆÂ∞ÜË¢´ÂÆåÂÖ®Ê∏ÖÈô§!",
      default: false,
    },
  ]);

  if (confirmReset) {
    fs.unlinkSync("config.yml");
    console.log(chalk.green("‚úÖ ÈÖçÁΩÆÂ∑≤ÈáçÁΩÆ! ËØ∑ÈáçÊñ∞ÈÖçÁΩÆÁõëÊéß‰ªªÂä°"));

    // ÈáçÁΩÆÂêéËØ¢ÈóÆÊòØÂê¶Á´ãÂç≥ÈÖçÁΩÆ
    const { startConfig } = await promptWithChinese([
      {
        type: "confirm",
        name: "startConfig",
        message: "ÊòØÂê¶Á´ãÂç≥ÈáçÊñ∞ÈÖçÁΩÆÁõëÊéß‰ªªÂä°?",
        default: true,
      },
    ]);

    if (startConfig) {
      await queryAndConfig();
    }
  } else {
    console.log(chalk.yellow("Â∑≤ÂèñÊ∂àÈáçÁΩÆ"));

    // ËØ¢ÈóÆÊòØÂê¶ÁªßÁª≠ÁºñËæë
    const { continueEdit } = await promptWithChinese([
      {
        type: "confirm",
        name: "continueEdit",
        message: "ÊòØÂê¶ÁªßÁª≠ÁºñËæëÈÖçÁΩÆ?",
        default: true,
      },
    ]);

    if (continueEdit) {
      await editConfig();
    }
  }
}

async function viewConfig() {
  try {
    const configContent = fs.readFileSync("config.yml", "utf-8");
    const config = yaml.load(configContent);

    console.log(chalk.blue("\nüìã ÂΩìÂâçÈÖçÁΩÆÊñá‰ª∂ÂÜÖÂÆπ:\n"));
    console.log(chalk.white(yaml.dump(config)));

    console.log(chalk.green("\n‚úÖ ÈÖçÁΩÆÊëòË¶Å:"));
    config.watch.forEach((watch, index) => {
      console.log(
        chalk.cyan(
          `ÁõëÊéß‰ªªÂä° ${index + 1}: ${watch.from} ‚Üí ${watch.to} (${watch.date})`
        )
      );
      if (watch.trains) {
        console.log(
          chalk.white(`  ËΩ¶Ê¨°: ${watch.trains.map((t) => t.code).join(", ")}`)
        );
      }
    });

    if (config.notifications && config.notifications.length > 0) {
      console.log(
        chalk.cyan(
          `Êé®ÈÄÅÈÖçÁΩÆ: ${config.notifications.map((n) => n.type).join(", ")}`
        )
      );
    }

    // ËØ¢ÈóÆÂêéÁª≠Êìç‰Ωú
    const { nextAction } = await promptWithChinese([
      {
        type: "list",
        name: "nextAction",
        message: "Êé•‰∏ãÊù•Ë¶ÅÂÅö‰ªÄ‰πà?",
        choices: [
          { name: "‚öôÔ∏è  ÁºñËæëÈÖçÁΩÆ", value: "edit" },
          { name: "üöÄ ÂêØÂä®ÁõëÊéß", value: "start" },
          { name: "üîô ËøîÂõû‰∏ªËèúÂçï", value: "back" },
        ],
      },
    ]);

    switch (nextAction) {
      case "edit":
        await editConfig();
        break;
      case "start":
        await startMonitoring();
        break;
      case "back":
        console.log(chalk.cyan("ËøîÂõû‰∏ªËèúÂçï"));
        break;
    }
  } catch (err) {
    console.log(chalk.red("ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÊàñÊ†ºÂºèÈîôËØØ"));

    // ÈÖçÁΩÆ‰∏çÂ≠òÂú®Êó∂ËØ¢ÈóÆÊòØÂê¶ÂàõÂª∫
    const { createConfig } = await promptWithChinese([
      {
        type: "confirm",
        name: "createConfig",
        message: "ÊòØÂê¶Á´ãÂç≥ÂàõÂª∫ÈÖçÁΩÆ?",
        default: true,
      },
    ]);

    if (createConfig) {
      await queryAndConfig();
    }
  }
}

async function startMonitoring() {
  try {
    fs.accessSync("config.yml");
    console.log(chalk.green("\nüöÄ Ê≠£Âú®ÂêØÂä®ÁõëÊéßÁ®ãÂ∫è...\n"));
    const { spawn } = await import("child_process");
    spawn("node", ["src/index.js"], { stdio: "inherit", cwd: process.cwd() });
  } catch (err) {
    console.log(chalk.red("ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåËØ∑ÂÖàÈÖçÁΩÆÁõëÊéß‰ªªÂä°"));
  }
}

main();
